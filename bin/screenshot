#!/usr/bin/env python3
import sys

# sys.stdout = open("/tmp/log.txt", "w")
# sys.stderr = sys.stdout


import optparse
import subprocess
import os
import notify2
import signal

from gi import require_version
require_version("Gtk", "3.0")

from gi.repository import Gtk, GLib



notify2.init(__name__, "glib")

CAPTURE_BIN = "scrot"
UPLOAD_BIN = "upload"
OUTPUT_DIRECTORY = os.path.expanduser("/tmp")
OUTPUT_FILE = "Screenshot from %y-%m-%d %H-%M-%S.png"

def capture_area():
    os.makedirs(OUTPUT_DIRECTORY, exist_ok=True)

    output_path = os.path.join(OUTPUT_DIRECTORY, OUTPUT_FILE)
    capture = subprocess.Popen(
        [CAPTURE_BIN, "--select", output_path, "--exec", "echo $f"],
        stdout=subprocess.PIPE
    )

    file_name = capture.stdout.read()
    return file_name.decode("utf8").rstrip("\n")

def capture_window():
    os.makedirs(OUTPUT_DIRECTORY, exist_ok=True)

    output_path = os.path.join(OUTPUT_DIRECTORY, OUTPUT_FILE)
    capture = subprocess.Popen(
        [CAPTURE_BIN, "--focused", "--border", output_path, "--exec", "echo $f"],
        stdout=subprocess.PIPE
    )

    file_name = capture.stdout.read()
    return file_name.decode("utf8").rstrip("\n")


def capture_screen():
    os.makedirs(OUTPUT_DIRECTORY, exist_ok=True)

    output_path = os.path.join(OUTPUT_DIRECTORY, OUTPUT_FILE)
    capture = subprocess.Popen(
        [CAPTURE_BIN, output_path, "--exec", "echo $f"],
        stdout=subprocess.PIPE
    )

    file_name = capture.stdout.read()
    return file_name.decode("utf8").rstrip("\n")

def upload(file_path):
    call = subprocess.Popen(
        [UPLOAD_BIN, file_path],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )

    if call.wait() == 0:
        url = call.stdout.read().decode("utf8").rstrip("\n")
        return url
    else:
        print(call.stdout.read(), file=sys.stderr)
        return None

def clip(item):
    clip = subprocess.Popen(["xclip", "-selection", "c"], stdin=subprocess.PIPE)
    clip.stdin.write(item.encode("utf8"))
    clip.stdin.close()
    return clip.wait() == 0

def clip_file(file_path):
    clip = subprocess.Popen(["xclip", "-selection", "c", "file_path"], stdin=subprocess.PIPE)
    clip.stdin.close()
    return clip.wait() == 0


if __name__ == "__main__":
    parser = optparse.OptionParser()
    type_group = optparse.OptionGroup(
        parser,
        "Type",
        "Type of screenshot you want to take"
    )

    type_group.add_option(
        "-s", "--select",
        dest="type", action="store_const", const=capture_area,
        help="Select a rectangular area on screen to take a screenshot of",
    )
    type_group.add_option(
        "-w", "--window",
        dest="type", action="store_const", const=capture_window,
        help="Take a screenshot of the focused window (including borders)",
    )
    type_group.add_option(
        "-d", "--display",
        dest="type",  action="store_const", const=capture_screen,
        help="Take a screenshot of the entire screen (Default)",
    )

    parser.add_option_group(type_group)

    parser.add_option(
        "-u", "--upload",
        dest="upload", action="store_true", default=False,
        help="Upload using inbuilt provider (%s)" % UPLOAD_BIN
    )

    parser.add_option(
        "-c", "--clip",
        dest="clip", action="store_true", default=True,
        help="Copy uploaded link to clipboard"
    )

    (options, args) = parser.parse_args()
    if len(args) != 0:
        print("**This command does not accept stray arguments**", file=sys.stderr)
        parser.print_help(sys.stderr)
        sys.exit(1)

    if options.type is None:
        print("**You must select a type of screenshot to take**", file=sys.stderr)
        parser.print_help(sys.stderr)
        sys.exit(1)

    file_path = options.type()


    if options.upload:
        url = upload(file_path)

        if options.clip:
            clip(url)
            notify2.Notification(
                "Screenshot taken.",
                "Link copied to clipboard"
            ).show()
        print(url)
    else:
        def callback(notification, action_key):
            if action_key == "upload":
                url = upload(file_path)
                if url is None:
                    notify2.Notification(
                        "Error occurred",
                        "Could not upload screenshot"
                    ).show()
                elif clip(url):
                    notify2.Notification(
                        "Screenshot uploaded",
                        "URL copied to clipboard"
                    ).show()

            elif action_key == "copy":
                if clip_file(file_path):
                    notify2.Notification(
                        "Screenshot copied",
                        "Shot copied to clipboard"
                    ).show()

            notification.close()



        def close_callback(notification=None):
            Gtk.main_quit()


        notification = notify2.Notification(
            "Screenshot taken.",
            "Screenshot stored in %s" % file_path
        )
        notification.add_action("upload", "Upload", callback)
        notification.add_action("copy", "Copy", callback)
        notification.connect("closed", close_callback)
        notification.show()

        signal.signal(signal.SIGINT, signal.SIG_DFL)

        GLib.timeout_add_seconds(10, close_callback)

        Gtk.main()
